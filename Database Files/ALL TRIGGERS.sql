CREATE SEQUENCE PANACEA.APPOINTMENT_SEQ_ID
START WITH 1
MAXVALUE 9999999
MINVALUE 1
CYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER PANACEA.APP_SL_NO_AUTO_INC
BEFORE INSERT 
ON PANACEA.APPOINTMENT
FOR EACH ROW
BEGIN
	SELECT PANACEA.APPOINTMENT_SEQ_ID.NEXTVAL INTO :NEW.APP_SL_NO FROM DUAL;
END;

-- surgery scheduling primary key increment trigger and sequence
CREATE SEQUENCE PANACEA.SUR_SCHE_ID
START WITH 1
MAXVALUE 9999999
MINVALUE 1
CYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER PANACEA.SUR_SCHE_NO_AUTO_INC
BEFORE INSERT 
ON PANACEA.SURGERY_SCHEDULE
FOR EACH ROW
BEGIN
	SELECT PANACEA.SUR_SCHE_ID.NEXTVAL INTO :NEW.SUR_SCHE_NO FROM DUAL;
END;

-- room admission
CREATE SEQUENCE PANACEA.ROOM_ADMISSION_SL
START WITH 1
MAXVALUE 9999999
MINVALUE 1
CYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER PANACEA.ROOM_ADMISSION_AUTO_INC
BEFORE INSERT 
ON PANACEA.ROOM_ADMISSION
FOR EACH ROW
BEGIN
	SELECT PANACEA.ROOM_ADMISSION_SL.NEXTVAL INTO :NEW.ADMISSION_SL FROM DUAL;
END;

-- dispensary auto increment and data load on insert
CREATE SEQUENCE PANACEA.DISPENSARY_SEQ
START WITH 1
MAXVALUE 9999999
MINVALUE 1
CYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER PANACEA.DISP_ID_AUTO_INC
BEFORE INSERT 
ON PANACEA.DISPENSARY
FOR EACH ROW
BEGIN
	SELECT PANACEA.DISPENSARY_SEQ.NEXTVAL INTO :NEW.SL_NO FROM DUAL;
	:NEW.PAID := 'F';
	:NEW.DISPENSE_TIME := SYSDATE;
	UPDATE MEDICINE SET STOCK=(SELECT STOCK FROM MEDICINE WHERE MED_ID = :NEW.MED_ID)-:NEW.QUANTITY_PCS WHERE MED_ID = :NEW.MED_ID;
END;

-- Monitoring Data From Patient 
CREATE SEQUENCE PANACEA.MONITOR_DATA_SEQ
START WITH 1
MAXVALUE 9999999
MINVALUE 1
CYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER PANACEA.MONITOR_DATA_INS
BEFORE INSERT
ON PANACEA.MONITORING_DATA
FOR EACH ROW
DECLARE
	TOTAL_COUNTS NUMBER;
	MIN_SL NUMBER;
BEGIN 
	SELECT PANACEA.MONITOR_DATA_SEQ.NEXTVAL INTO :NEW.SL_NO FROM DUAL;
 	SELECT COUNT(*) INTO TOTAL_COUNTS FROM MONITORING_DATA;
 	IF TOTAL_COUNTS >= 37500 THEN
 		FOR R IN (SELECT SL_NO FROM MONITORING_DATA WHERE TIME>(LOCALTIMESTAMP(0)-0.20833) ORDER BY TIME DESC)
		LOOP
			DELETE FROM MONITORING_DATA WHERE SL_NO = R.SL_NO;
		END LOOP;
	END IF;
END;

-- Bill Form Auto Increment
CREATE SEQUENCE PANACEA.BILL_FORM_ID_SEQ
START WITH 1
MAXVALUE 9999999
MINVALUE 1
CYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER PANACEA.BILL_FORM_ID_AUTO_INC
BEFORE INSERT 
ON PANACEA.BILL
FOR EACH ROW
BEGIN
	SELECT PANACEA.BILL_FORM_ID_SEQ.NEXTVAL INTO :NEW.FORM_ID FROM DUAL;
	:NEW.TRANSACTION_TIME := TRUNC(SYSDATE);
END;

-- New Payment Status on Insert In Checkup
CREATE OR REPLACE TRIGGER PANACEA.CHECKUP_DUE_AUTO
BEFORE INSERT 
ON PANACEA.CHECKUP
FOR EACH ROW
BEGIN 
	:NEW.PAYMENT_STATUS := 'DUE';
END;


-- Clearing Bill After Payment
CREATE OR REPLACE TRIGGER PANACEA.BILL_CLEAR_AFTER_INSERT
AFTER INSERT
ON PANACEA.BILL
FOR EACH ROW
BEGIN
	FOR CUR IN (SELECT CH.CHECKUP_ID
							FROM CHECKUP CH JOIN APPOINTMENT A
							ON (CH.APP_SL_NO = A.APP_SL_NO 
							AND A.PATIENT_ID = :NEW.PATIENT_ID 
							AND A.STATUS='accepted' 
							AND CH.PAYMENT_STATUS = 'DUE'))
	LOOP
		UPDATE CHECKUP SET PAYMENT_STATUS = 'DONE' WHERE CHECKUP_ID = CUR.CHECKUP_ID;
	END LOOP;
	
	FOR CUR IN (SELECT ADMISSION_SL FROM ROOM_ADMISSION
							WHERE RELEASE_DATE IS NULL AND PATIENT_ID = :NEW.PATIENT_ID AND ROOM_NO NOT IN
							(SELECT ROOM_NO FROM ROOM R JOIN BLOCK B ON
							(R.BLOCK_ID = B.BLOCK_ID AND B.CATEGORY = 'SURGERY')
							))
	LOOP
		UPDATE ROOM_ADMISSION SET RELEASE_DATE=TRUNC(SYSDATE), PAID='T' WHERE ADMISSION_SL = CUR.ADMISSION_SL;
	END LOOP;
	
	FOR CUR IN (SELECT ADMISSION_SL FROM ROOM_ADMISSION
							WHERE RELEASE_DATE IS NOT NULL AND PATIENT_ID = :NEW.PATIENT_ID AND ROOM_NO IN
							(SELECT ROOM_NO FROM ROOM R JOIN BLOCK B ON
							(R.BLOCK_ID = B.BLOCK_ID AND B.CATEGORY = 'SURGERY')
							))
	LOOP
		UPDATE ROOM_ADMISSION SET PAID='T' WHERE ADMISSION_SL = CUR.ADMISSION_SL;
	END LOOP;
	
	FOR CUR IN (SELECT SL_NO FROM DISPENSARY WHERE ASSIGNED_TO = :NEW.PATIENT_ID AND PAID='F')
	LOOP
		UPDATE DISPENSARY SET PAID='T' WHERE SL_NO = CUR.SL_NO;
	END LOOP;
END;


-- Auto Increment Notification ID 
CREATE SEQUENCE PANACEA.NOTIFICATION_ID_SEQ
START WITH 1
MAXVALUE 9999999
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER PANACEA.NOTIFICATION_ID_AUTO_INC
BEFORE INSERT 
ON PANACEA.NOTIFICATION
FOR EACH ROW
BEGIN
	SELECT PANACEA.NOTIFICATION_ID_SEQ.NEXTVAL INTO :NEW.NOTIFICATION_ID FROM DUAL;
END;

-- Auto Creating 'Date Created' in table Person for insert
CREATE OR REPLACE TRIGGER user_insert_date
BEFORE INSERT ON PERSON
FOR EACH ROW
BEGIN
	:NEW.DATE_CREATED := SYSDATE;
END;


CREATE SEQUENCE med_id
INCREMENT BY 1
START WITH 1
MAXVALUE 99999999 
MINVALUE 1
NOCYCLE;

CREATE OR REPLACE TRIGGER med_id_on_insert
  BEFORE INSERT ON MEDICINE
  FOR EACH ROW
BEGIN
  SELECT med_id.NEXTVAL
  INTO :new.MED_ID
  FROM dual;
END;

-- Auto Primary Key For Person Insert 
CREATE SEQUENCE person_id
INCREMENT BY 1
START WITH 262
MAXVALUE 99999999 
MINVALUE 1
NOCYCLE;

CREATE OR REPLACE TRIGGER person_id_on_insert
  BEFORE INSERT ON PERSON
  FOR EACH ROW
BEGIN
  SELECT person_id.NEXTVAL
  INTO :new.ID
  FROM dual;
END;


CREATE SEQUENCE service_id
INCREMENT BY 1
START WITH 1
MAXVALUE 99999999 
MINVALUE 1
NOCYCLE;

CREATE OR REPLACE TRIGGER service_id_on_insert
  BEFORE INSERT ON SERVICE
  FOR EACH ROW
BEGIN
  SELECT service_id.NEXTVAL
  INTO :new.SERVICE_ID
  FROM dual;
END;


-- Automatically Creating Appointment and Notification on Critical test Result 
CREATE OR REPLACE TRIGGER AUTO_APPNT_AND_NOTIFICATION
BEFORE UPDATE
OF STATUS
ON TEST_RESULTS
FOR EACH ROW
DECLARE
		PAT_ID NUMBER;
		PAT_NAME VARCHAR2(50);
		DOC_ID NUMBER;
		DOC_NAME VARCHAR2(50);
		SERV_ID NUMBER;
		SERV_NAME VARCHAR2(100);
		PROBLEM_DESC VARCHAR2(500);
		SCHED_ID NUMBER;
		SCHED_DATE VARCHAR2(30);
		TIME_STRING VARCHAR2(50);
		NOTI_MESSAGE VARCHAR2(500);
		DUPLICATE NUMBER;
BEGIN

		IF :NEW.STATUS = 'CRITICAL' THEN
				PAT_ID := :NEW.PATIENT_ID;
				SELECT DOCTOR_ID INTO DOC_ID FROM APPOINTMENT WHERE APP_SL_NO = :NEW.APP_SL_NO;
													
				SERV_ID := :NEW.SERVICE_ID;
				
				SELECT S.SERVICE_NAME INTO SERV_NAME
				FROM SERVICE S
				WHERE S.SERVICE_ID = SERV_ID;
				
				PROBLEM_DESC := 'Found some unexpected test result for ' || SERV_NAME;
				
				SELECT MIN(SCHEDULE_ID) INTO SCHED_ID
				FROM SCHEDULE 
				WHERE ID = DOC_ID
				AND TO_DATE(SCHEDULE_DATE) > TRUNC(SYSDATE)
				AND (TIME_ID = 6 OR TIME_ID = 7);
				
				SELECT COUNT(*) INTO DUPLICATE FROM APPOINTMENT
				WHERE PATIENT_ID = PAT_ID AND DOCTOR_ID = DOC_ID AND SCHEDULE_ID = SCHED_ID;
				
				IF DUPLICATE = 0 THEN
						INSERT INTO APPOINTMENT(APP_SL_NO, PATIENT_ID, DOCTOR_ID, APPNT_DATE,PROB_DESC, STATUS, SCHEDULE_ID)
						VALUES((SELECT MAX(APP_SL_NO) FROM APPOINTMENT) + 1, PAT_ID, DOC_ID,SYSDATE,PROBLEM_DESC,'pending', SCHED_ID);
	
						SELECT (FIRST_NAME || ' ' || LAST_NAME) INTO DOC_NAME FROM PERSON WHERE ID = DOC_ID;
						SELECT TO_CHAR(SCHEDULE_DATE) INTO SCHED_DATE FROM SCHEDULE WHERE SCHEDULE_ID = SCHED_ID;
						SELECT (START_TIME || '-' || END_TIME) INTO TIME_STRING FROM TIME_TABLE WHERE TIME_ID = (SELECT TIME_ID FROM SCHEDULE 
																																																			WHERE SCHEDULE_ID = SCHED_ID);
						
						NOTI_MESSAGE := PROBLEM_DESC || '. A new appointment was issued with Dr. ' || DOC_NAME || ' on ' || SCHED_DATE || ' at ' || TIME_STRING;
						
						INSERT INTO NOTIFICATION
						VALUES((SELECT MAX(NOTIFICATION_ID) FROM NOTIFICATION) + 1, PAT_ID, 'I',NOTI_MESSAGE);
						
						
						SELECT (FIRST_NAME || ' ' || LAST_NAME) INTO PAT_NAME FROM PERSON WHERE ID = PAT_ID;
						NOTI_MESSAGE := 'An emergency appointment was issued for the patient ' || PAT_NAME;
						
						INSERT INTO NOTIFICATION
						VALUES((SELECT MAX(NOTIFICATION_ID) FROM NOTIFICATION) + 1, DOC_ID, 'U',NOTI_MESSAGE);
				
				ELSE
						INSERT INTO NOTIFICATION
						VALUES((SELECT MAX(NOTIFICATION_ID) FROM NOTIFICATION) + 1, PAT_ID, 'I',PROBLEM_DESC);
				END IF;
				
				
-- 				
		ELSIF :NEW.STATUS = 'NORMAL' THEN
				PAT_ID := :NEW.PATIENT_ID;
				
				SERV_ID := :NEW.SERVICE_ID;
				
				SELECT S.SERVICE_NAME INTO SERV_NAME
				FROM SERVICE S
				WHERE S.SERVICE_ID = SERV_ID;
				
				NOTI_MESSAGE := 'Your test result have been published for ' || SERV_NAME;
				
				INSERT INTO NOTIFICATION
				VALUES((SELECT MAX(NOTIFICATION_ID) FROM NOTIFICATION) + 1, PAT_ID, 'U',NOTI_MESSAGE);
				
		END IF;
END;
/

-- Room Admission Created on Surgery Scheduling
CREATE OR REPLACE TRIGGER AUTO_ROOM_ADMS_ON_SUR_SCH
AFTER INSERT ON SURGERY_SCHEDULE
FOR EACH ROW 
DECLARE
	PAT_ID NUMBER;
	ROOM_NO NUMBER;
	ADMISSION_DATE DATE;
BEGIN
	PAT_ID := :NEW.PATIENT_ID;
	ROOM_NO := :NEW.ROOM_NO;
	ADMISSION_DATE := :NEW.SUR_DATE;
	INSERT INTO ROOM_ADMISSION(PATIENT_ID, ROOM_NO, ADMISSION_DATE, PAID) VALUES(PAT_ID, ROOM_NO, ADMISSION_DATE, 'F');
END;
/